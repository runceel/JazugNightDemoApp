// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace JazugNight.Client.Apis
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for JazugapiBackup.
    /// </summary>
    public static partial class JazugapiBackupExtensions
    {
            /// <summary>
            /// GetEmployees
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<Employee> GetGetemployees(this IJazugapiBackup operations)
            {
                return operations.GetGetemployeesAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetEmployees
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Employee>> GetGetemployeesAsync(this IJazugapiBackup operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGetemployeesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// CreateEmployee
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            public static void PostCreateemployee(this IJazugapiBackup operations, Body body = default(Body))
            {
                operations.PostCreateemployeeAsync(body).GetAwaiter().GetResult();
            }

            /// <summary>
            /// CreateEmployee
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='body'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PostCreateemployeeAsync(this IJazugapiBackup operations, Body body = default(Body), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PostCreateemployeeWithHttpMessagesAsync(body, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// GetEmployeeById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Employee GetGetemployeebyid(this IJazugapiBackup operations, object id)
            {
                return operations.GetGetemployeebyidAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// GetEmployeeById
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Employee> GetGetemployeebyidAsync(this IJazugapiBackup operations, object id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetGetemployeebyidWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
